#coding: utf-8
#BASKET routes


get "/events/:eid/baskets/new" do |eid|
  @event = Event.get(eid)
  unless @event
    status 404
    set_flash :error, "No such event."
    redirect_ssl "/events"
  end
  
  @basket = Basket.new(:event => @event)
  haml :"basket/new"

end

post "/events/:eid/baskets" do |eid|
  @event = Event.get(eid)
  unless @event
    status 404
    set_flash :error, "No such event."
    redirect_ssl "/events"
  end
  
  @basket = Basket.new(params[:basket].merge(:event => @event))
  if @basket.valid? && @basket.save
    status 201
    set_flash :ok, "Basket created."
    redirect_ssl "/events/#{@event.id}/baskets/#{@basket.id}/edit"
  else
    collect_errors_from @basket
    haml :"basket/new"
  end
end
    


get "/events/:eid/baskets/:bid/edit" do |eid, bid|
  @event = Event.get(eid)
  @basket = Basket.get(bid)
  unless @event && @basket && (@basket.event == @event)
    status 404
    set_flash :error, "No such event/basket."
    redirect_ssl "/events"
  end

  haml :"basket/edit" 
end

put "/events/:eid/baskets/:bid" do |eid, bid|
  @event = Event.get(eid)
  @basket = Basket.get(bid)
  unless @event && @basket && (@basket.event == @event)
    status 404
    set_flash :error, "No such event/basket."
    redirect_ssl "/events"
  end

  if params["books"]
    @basket.books = []
    params["books"].each do |book|
      book_id = book[0]
      b = Book.get(book_id)
      @basket.books << b
    end
  end
  
  if @basket.save
    @basket.update(params["basket"])
    if @basket.valid? && @basket.save
      status 200
      set_flash :ok, "Basket updated."
      redirect_ssl "/events/#{@event.id}"
    end
  else
    set_flash :error, "Errors occured! Basket not updated!"
    haml :"basket/edit"
  end
end



get "/events/:eid/baskets/:bid/delete" do |eid, bid|
  @event = Event.get(eid)
  @basket = Basket.get(bid)
  unless @event && @basket && 
         (@basket.event == @event)
    status 404
    set_flash :error, "No such event/basket."
    redirect_ssl "/events"
  end
  if @basket.received_payment?
    set_flash :error, "This basket has ALREADY BEEN PAID FOR!"
    redirect_ssl "/events/#{@event.id}"
  elsif @basket.reserved?
    set_flash :error, "This basket has ALREADY BEEN RESERVED!"
    redirect_ssl "/events/#{@event.id}"
  else
    haml :"basket/delete"
  end
end

delete "/events/:eid/baskets/:bid" do |eid, bid|
  @event = Event.get(eid)
  @basket = Basket.get(bid)
  unless @event && @basket && 
         (@basket.event == @event)
    status 404
    set_flash :error, "No such event/basket."
    redirect_ssl "/events"
  end

  if @basket.destroy
    status 200
    set_flash :ok, "Basket deleted."
    redirect_ssl "/events/#{@event.id}"
  else
    set_flash :error, "Basket deletion error."
    redirect_ssl "/events/#{@event.id}"
  end

end

