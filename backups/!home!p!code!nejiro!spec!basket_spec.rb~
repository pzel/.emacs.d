# coding: utf-8
# TESTS FOR NEJIRO
# Running on RSpec
# © 2011 Przemysław Żelazny
#
# RSpec tests for the Bakset model

require './spec/base.rb'


describe Basket do

  describe "Basic attributes" do
    before :each do 
      @basket = Basket.new
    end
    
    it "should be there" do
      @basket.class.should == Basket
    end
    
    it "should have the basic properties" do
      [:name, :created_at, :updated_at, :buyer_email, :buyer_phone, 
       :price, :received_payment, :reserved, :notes, :description].each do |prop|
        @basket.should respond_to prop
      end
    end
    
  end #basic attributes
  
  describe "associations" do
    before :each do
      @event = Event.create(:name =>"sample event",
                            :date => Date.today,
                            :url => "http://example.org/sample",
                            :login => "bob",
                            :password => "foobar")
      @books = []
      10.times { |i|
        @books << Book.create(:title => "title" + i.to_s, :author => "author" + i.to_s, :publisher => "publisher" + i.to_s) }
      @basket = Basket.create(:name =>"a", :price=>50.32, :event => @event, :books => @books)
    end
    
    it "should have books associated" do
      @basket.books.should == @books
    end
    
    it "should have an event associated" do
      @basket.event.should == @event
    end
    
  end #assoc

  describe "crud actions" do
    it "should be created" do
      b=Basket.create(:name => "a", :price => 999.99)
      b.save.should be_true
    end
    
    it "should be updated" do
      b=Basket.create(:name => "a", :price => 999.99)
      b.save
      b.update(:name =>"bbb", :reserved => true, :buyer_email => "gogo@bob.com")
      b.save
      b.name.should == "bbb"
      b.reserved.should == true
      b.buyer_email.should == "gogo@bob.com"
    end
    
    it "should be destoyed" do
      b=Basket.create(:name => "a", :price => 999.99)
      b.destroy.should be_true
    end
    
  end #crud actions
  
  describe "validations" do
    before :each do
      @event = Event.create(:name =>"sample event",
                            :date => Date.today,
                            :url => "http://example.org/sample",
                            :login => "bob",
                            :password => "foobar")
      @books = []
      10.times { |i|
        @books << Book.create(:title => "title" + i.to_s, :author => "author" + i.to_s, :publisher => "publisher" + i.to_s) }
      @basket = Basket.create(:name =>"a", :price=>50.32, :event => @event, :books => @books)
    end
    
    it "should not allow an update to reserved without email OR phone" do
      @basket.update(:reserved => true).should be_false
    end
    
    
    it "should not allow an update with invalid email" do
      @basket.update(:reserved => true, :buyer_email=>"invalid.com").should be_false
    end
    
    it "should not allow and update with invalid phone number" do
      @basket.update(:reserved => true, :buyer_phone=>"rer9345").should be_false
    end
    
    it "should update to reserved with valid email" do
      @basket.update(:reserved => true, :buyer_email=>"good@invalid.com").should be_true
    end
    
    
    
  end #validations
  
  
  
  describe "routes" do
    
    before :each do
      @event = Event.create(:name =>"sample event",
                            :date => Date.today,
                            :url => "http://example.org/sample",
                            :login => "bob",
                            :password => "foobar")
      @books = []
      10.times { |i|
        @books << Book.create(:title => "title" + i.to_s, 
                              :author => "author" + i.to_s, 
                              :publisher => "publisher" + i.to_s) }
    end
    
    
    describe "GET new" do
      
      it "should render a new page" do
        get "/events/#{@event.id}/baskets/new" do
          last_response.should be_ok
        end
      end
      
      it "should show the right post form" do
        get "/events/#{@event.id}/baskets/new" do
          last_response.body.should have_selector :form, 
          :action => "/events/#{@event.id}/baskets",
          :method => "post"
          last_response.body.should have_selector :input, 
          :type => "hidden", :name => "_method", :value=> "POST"
          
        end
      end
      
    end #GET new

    describe "POST new" do
      before :each do
        @hash = {:name => "Klasyka klasy B", :price=>43.32}
      end
      
      it "should be saved to the db" do
        lambda {post "/events/#{@event.id}/baskets", :basket => @hash
        }.should change(Basket, :count).by 1
      end
      
      it "should be saved with proper parameters" do
        post "/events/#{@event.id}/baskets", :basket => @hash
        @basket = Basket.first(:name => @hash[:name])
        @basket.class.should == Basket
      end
      
      it "should redirect after successful post" do 
        post "/events/#{@event.id}/baskets", :basket => @hash do
          last_response.should be_redirect
        end
      end
      
    end #post new
    
    describe "GET edit" do
      before :each do 
        @basket = Basket.create(:event => @event, :books => @books[1..3],
                                :name => "gogo", :price=>23.23)
      end
      
      it "should render the edit page" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/edit" do
          last_response.should be_ok
        end
      end
      it "should show the basket name" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/edit" do
          last_response.body.should include @basket.name
        end
      end
      it "should have the javascript dynamic interface" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/edit" do
          last_response.body.should have_selector :div, :id => "basket_interface"
        end
      end      
      
    end #get edit
    
    describe "GET delete" do
      before :each do 
        @basket = Basket.create(:event => @event, :books => @books[1..3],
                                :name => "gogo", :price=>53.5)
      end
      
      it "should render the delete page" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/delete" do
          last_response.should be_ok
        end
      end
      it "should show the basket name" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/delete" do
          last_response.body.should include @basket.name
        end
      end
      it "should show the right post form" do
        get "/events/#{@event.id}/baskets/#{@basket.id}/delete" do
          last_response.body.should have_selector :form, 
          :action => "/events/#{@event.id}/baskets/#{@basket.id}",
          :method => "post"
          last_response.body.should have_selector :input, 
          :type => "hidden", :name => "_method", :value=> "DELETE"
          
        end
      end
      
    end #GET delete
    
    describe "DELETE destroy" do
      
      before :each do 
        @basket = Basket.create(:event => @event, :books => @books[1..3],
                                :name => "gogo", :price=>53.5)
      end
      
      it "should remove the basket from the db" do
        lambda {delete "/events/#{@event.id}/baskets/#{@basket.id}"
        }.should change(Basket, :count).by -1
      end
      
      it "should delete the basket" do
        bid = @basket.id
        delete "/events/#{@event.id}/baskets/#{@basket.id}"  
        Basket.get(bid).should be_false
      end
      
      it "should not delete a basket if :received_payment is true" do
        @basket.update(:received_payment => true)
        lambda {delete "/events/#{@event.id}/baskets/#{@basket.id}"  
        }.should_not change(Basket, :count)
      end
      
      it "should not delete a basket if :reserved is true" do
        @basket.update(:reserved => true, :buyer_email=>"jan@polksi.pl")
        lambda {delete "/events/#{@event.id}/baskets/#{@basket.id}"  
        }.should_not change(Basket, :count)
      end 
      
      
    end #delete destroy
    
    
    describe "PUT update" do
      before :each do 
        @basket = Basket.create(:event => @event, :books => @books[1..3],
                                :name => "gogo", :price=>53.5)
      end
      

      it "should update books" do
        put "/events/#{@event.id}/baskets/#{@basket.id}", 
        :event=> @event
        
      end


      
    end #PUT

  end #routes
  
end #basket


