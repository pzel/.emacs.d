# coding: utf-8
# TESTS FOR NEJIRO
# Running on RSpec
# © 2011 Przemysław Żelazny
#
# RSpec tests for the Bookset model and controller.
require './spec/base.rb'

describe Event do

  before :each do 
    @event = Event.create
  end

  it "should be there" do
    Event.should_not be_nil
  end

  describe "Attributes" do

    it "should have a name" do
      @event.should respond_to :name 
    end

    it "should have a date" do
      @event.should respond_to :date
    end
=begin
    it "should have many baskets" do
      @event.should respond_to :book_baskets
      @event.book_baskets.count.should == 0
    end
=end
    it "should have a url" do
      @event.should respond_to :url
    end

    it "should have a login" do
      @event.should respond_to :login
    end

    it "should have a password" do
      @event.should respond_to :password
    end

    it "should have a text" do
      @event.should respond_to :text
    end

    it "should have an illustration" do
      @event.should respond_to :illustration
    end

  end  #attributes

  describe "creation" do

    before :each do 
      @attr = { 
        :name =>"sample event",
        :date => Date.today,
        :url => "http://example.org/sample",
        :login => "bob",
        :password => "foobar"
      }
      @event = Event.create @attr
    end

    it "should be created with valid attributes" do
      @event.should be_true
    end

    it "should have a name" do
      @event.name.should == @attr[:name]
    end

    it "should have a date" do
      @event.date.should == @attr[:date]
    end

    it "should have a url" do
      @event.url.should == @attr[:url]
    end

    it "should have a login" do
      @event.login.should == @attr[:login]
    end

    it "should have a password" do
      @event.password.should == @attr[:password]
    end

  end #creation

  describe "update" do
    before :each do 
      @attr = { :name =>"sample event",
                :date => Date.today,
                :url => "sample",
                :login => "bob",
                :password => "foobar"
              }
      @event = Event.create @attr
    end

    it "should update just the name" do
      @event.update :name=>"new event"
      @event.name.should == "new event"
    end

    it "should update just the date" do
      @event.update :date=>Date.today+1
      @event.date.should == Date.today+1
    end
    
    it "should update just the login" do
      @event.update :login => "tytus"
      @event.login.should == "tytus"
    end

    it "should update just the password" do
      @event.update :password => "dezoo"
      @event.password.should == "dezoo"
    end

    it "should update name, date, login and pass at once" do
      @event.update(:password => "go", :login => "saruman",
                    :name => "gala", :date => Date.today+2)
      @event.password.should == "go"
      @event.login.should == "saruman"
      @event.name.should == "gala"
      @event.date.should == Date.today+2
    end

  end #update



end #event model

describe "Event routes" do

  before :each do 
    @event_hash = {:name => "wesele adama i zosi",
                          :date => Date.today,
                          :login => "100lat",
                          :url => "sample_url",
                          :password => "mlodejparze"}
    @event = Event.create @event_hash
    @eid = @event.id
  end

  describe "get index" do
    before :each do 
      @events = []
      10.times do |i|
        e = Event.create(:name =>  "a name #{i}",
                         :date => Date.today + i,
                         :login => "login #{i}",
                         :url => "sample_url #{i}",
                         :password=>"password #{i}")
        @events << e
      end
    end


    it "should be successful" do
      get "/events" do
        last_response.should be_ok
      end
    end
 
    it "should have a new event link" do
      get "/events" do
        last_response.body.should include "href='/events/new'" 
      end
    end

    it "should list all the events" do
      get "/events" do
        last_response.body.should include "wesele adama i zosi"
        last_response.body.should include "a name 0"
        last_response.body.should include "a name 1"
        last_response.body.should include "a name 2"
        last_response.body.should include "a name 3"
        last_response.body.should include "a name 4"
        last_response.body.should include "a name 5"
        last_response.body.should include "a name 6"
        last_response.body.should include "a name 7"
        last_response.body.should include "a name 8"
        last_response.body.should include "a name 9"
      end
    end

  end #get index

  describe "get show" do
    it "should display the page" do
      get "/events/#{@eid}" do
        last_response.should be_ok
      end
    end
     it "should show the event name" do
      get "/events/#{@eid}" do
        last_response.body.should include @event.name
      end
    end
    it "should show the edit and delete links" do
      get "/events/#{@eid}" do
        last_response.body.should include "href='/events/#{@eid}/edit" 
        last_response.body.should include "href='/events/#{@eid}/delete" 
      end
    end
  
  end #get show

  describe "get new" do

    it "should display the page" do
      get "/events/new" do
        last_response.should be_ok
      end
    end

    it "should show the form" do
      get "/events/new" do
        last_response.body.should include "form"
      end
    end

    it "should load event.js" do
      get "/events/new" do
        last_response.body.should have_selector :script, :src=>"/js/event.js"
      end
    end

  end #get new

  describe "post new" do
    before :each do 
      @e = {:name =>  "new name",
           :date => Date.today,
           :login => "login",
           :url => "sample_url x",
           :password=>"password"}
    end

    it "should save the event" do
      lambda {
        post "/events", :event => @e
      }.should change(Event, :count).by 1
    end

    it "should not save a malformed event - no login" do
      lambda {
        post "/events", :event => @e.merge(:login=>nil)
      }.should_not change(Event, :count)
    end

    it "should not save a malformed event - no name" do
      lambda {
        post "/events", :event => @e.merge(:name=>nil)
      }.should_not change(Event, :count)
    end
    it "should not save a malformed event - no url" do
      lambda {
        post "/events", :event => @e.merge(:url=>nil)
      }.should_not change(Event, :count)
    end
    it "should not save a malformed event - no password" do
      lambda {
        post "/events", :event => @e.merge(:password=>nil)
      }.should_not change(Event, :count)
    end
  end #post new

  describe "get edit" do

    it "should show the edit page" do
      get "/events/#{@eid}/edit" do
        last_response.should be_ok
      end
    end
    
    it "should load event.js" do
      get "/events/new" do
        last_response.body.should have_selector :script, :src=>"/js/event.js"
      end
    end

    it "should display the proper data in the form" do
      get "/events/#{@eid}/edit" do
        last_response.body.should include @event.name
        last_response.body.should include @event.nice_date
        last_response.body.should include @event.url
        last_response.body.should include @event.login
        last_response.body.should include @event.password
      end
    end 
 
    it "should have the right submit action" do
      get "/events/#{@eid}/edit" do
        last_response.body.should include "action='/events/#{@eid}'"
        last_response.body.should include "value='PUT'"
      end
    end

  end #get edit

  describe "PUT edit" do
    it "should save well-formed edits" do
      put "/events/#{@eid}", :event=> @event_hash.merge(:name=>"gogol")
      @event.reload
      @event.name.should == "gogol"
    end
    
    it "should not save malformed edits -- no name" do
      put "/events/#{@eid}", :event=> @event_hash.merge(:name=>"")
      @event.reload
      @event.name.should == @event_hash[:name]
    end
    it "should not save malformed edits -- no login" do
      put "/events/#{@eid}", :event=> @event_hash.merge(:login=>"")
      @event.reload
      @event.login.should == @event_hash[:login]
    end
    it "should not save malformed edits -- no url" do
      put "/events/#{@eid}", :event=> @event_hash.merge(:url=>"")
      @event.reload
      @event.url.should == @event_hash[:url]
    end
    it "should not save malformed edits -- no password" do
      put "/events/#{@eid}", :event=> @event_hash.merge(:password=>"")
      @event.reload
      @event.password.should == @event_hash[:password]
    end

  end #put edit

  describe "get delete" do
    it "should show the delete page" do
      get "/events/#{@eid}/delete" do
        last_response.should be_ok
      end
    end
  
    it "should show the proper event name" do
      get "/events/#{@eid}/delete" do
        last_response.body.should include @event.name
      end
    end

    it "should have the proper method & action" do
      get "/events/#{@eid}/delete" do
        last_response.body.should include "action='/events/#{@eid}'"
        last_response.body.should include "value='DELETE"
      end
    end

  end #get delete

  describe "DELETE /events/:id" do
    it "should delete an existing event" do
      lambda { delete "/events/#{@eid}"
      }.should change(Event, :count).by -1
    end

    it "should delete the right event" do
      new_event = Event.create(@event_hash.merge(:name=>"a wholly new event"))
      id = new_event.id
      delete "/events/#{id}"
      Event.get(id).should be_nil
    end

    it "should not delete an unexistent event" do
      id = Event.count + 8888
      lambda { delete "/events/#{id}"
      }.should_not change(Event, :count)
    end


  end #delete /event/:id

end
